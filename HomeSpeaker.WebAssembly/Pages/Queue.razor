@page "/Queue"
@inject HomeSpeakerService svc
@inject IJSRuntime JSRuntime
@inject ILogger<Queue> logger

<button @onclick=refresh title="Refresh queue" class="btn btn-secondary position-absolute top-10 end-0 mx-3"><span class="oi oi-reload"></span></button>

<div class="row">
    <div class="col-auto fs-6 fw-light">
        Now Playing:
    </div>
    <div class="col-12 col-lg h3 fw-bold">
        @currentSong
    </div>
</div>


<div class="d-flex flex-wrap align-items-start my-3 justify-content-center">
    <div>
        <PlayControls />
    </div>
</div>

<div class="align-content-center w-100">
    <div class="mb-2">Volume Level: @volumeLevel</div>
    <FluentSlider Min="0" Max="100" ValueExpression=@(()=>volumeLevel) ValueChanged=volumeChanged />
</div>

<div class="d-flex align-items-start">
    <div class="flex-grow-1">
        <h4 class="mb-0">Queue (drag & drop to reorder)</h4>
        <div class="fs-6 mt-0">(@queue?.Count().ToString("n0") songs in queue)</div>
    </div>
    <button @onclick=saveQueueAsPlaylist title="Save queue as playlist" class="btn btn-link me-2">Save as Playlist</button>
</div>

@if (queue.Any())
{
    @*    <ul ondragover="event.preventDefault();">
        @foreach (var song in queue)
        {
            <li draggable="true"
                style="list-style-type: none; touch-action: none;"
                tabindex="1"
                @key=(++listKey)
                @ondrag=@(()=>StartDrag(song))
                @ondrop=@(()=>Drop(song))>
                <QueueItem SongViewModel=song Removed="removeFromQueue" />
            </li>
        }
    </ul>*@
    <MudDropContainer T="SongViewModel"
                  Items="queue"
                  ItemsSelector="@((_,_) => true)"
                  ItemDropped="ItemUpdated"
                  Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <div class="flex-grow-1">
                <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                    <MudDropZone T="SongViewModel" Class="flex-grow-1" AllowReorder="true" />
                </MudList>
            </div>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Class="my-3">
                <QueueItem SongViewModel="context" Removed="removeFromQueue" />
            </MudPaper>
        </ItemRenderer>
    </MudDropContainer>
}

@code {
    private async Task ItemUpdated(MudItemDropInfo<SongViewModel> dropItem)
    {
        queue.Remove(dropItem.Item);
        queue.Insert(dropItem.IndexInZone, dropItem.Item);
        await svc.UpdateQueueAsync(queue);
    }

    int volumeLevel = 40;
    int listKey = 0;
    List<SongViewModel> queue = new();
    string currentSong;
    int currentIndex;

    protected override async Task OnInitializedAsync()
    {
        await refresh();
        svc.QueueChanged += async (_, _) =>
        {
            logger.LogInformation("The QueueChanged event was raised.  Refreshing.");
            await refresh();
        };
    }

    async Task volumeChanged(int volume)
    {
        volumeLevel = volume;
        logger.LogInformation("Setting volume to {volumeLevel}", volumeLevel);
        await svc.SetVolume(volumeLevel);
    }

    async Task saveQueueAsPlaylist()
    {
        var newPlaylistName = String.Format("From Queue {0:ddd d MMM hh:mm tt}", DateTime.Now);
        foreach (var song in queue)
        {
            await svc.AddToPlaylistAsync(newPlaylistName, song.Path);
        }
    }

    async Task removeFromQueue(SongViewModel song)
    {
        queue.Remove(song);
        await svc.UpdateQueueAsync(queue);
    }

    async Task refresh()
    {
        queue.Clear();
        queue.AddRange(await svc.GetPlayQueueAsync());
        var status = await svc.GetStatusAsync();
        currentSong = status?.CurrentSong?.Name ?? "[ Not playing anything ]";
        StateHasChanged();
    }

    void StartDrag(SongViewModel song)
    {
        currentIndex = getIndex(song);
    }

    int getIndex(SongViewModel song) => queue.FindIndex(s => s.SongId == song.SongId);

    async Task Drop(SongViewModel song)
    {
        if (song == null)
            return;
        var newIndex = getIndex(song);
        var current = queue[currentIndex];
        queue.RemoveAt(currentIndex);
        queue.Insert(newIndex, current);

        currentIndex = newIndex;

        StateHasChanged();

        await svc.UpdateQueueAsync(queue);
    }
}
