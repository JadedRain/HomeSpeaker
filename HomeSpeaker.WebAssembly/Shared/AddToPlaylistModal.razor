@inject HomeSpeakerService svc

<FluentDialog @ref=dialog>
    <h3>Add to Playlist</h3>
    @if(allPlaylists == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <form method="dialog">
            @if (allPlaylists.Any())
            {
                <div class="fw-bold">Select one or more existisng playlists:</div>
                @foreach (var selectionState in selections)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" checked=@selectionState.NewValue value=@selectionState.Name @oninput=@((args)=>checkedChanged(args.Value as bool?, selectionState.Name))>
                        <label class="form-check-label">@selectionState.Name</label>
                    </div>
                }
            }
            <div class="fw-bold">Create a new playlist:</div>
            <input class="form-control" @bind=newPlaylistName />
        </form>
    }
    <button @onclick=close>Cancel</button>
    <button @onclick=save>Save</button>
</FluentDialog>

@code {
    [Parameter] public SongViewModel Song{ get; set; }
    private FluentDialog? dialog;
    private IEnumerable<Playlist> allPlaylists;
    private string newPlaylistName;

    private List<SelectionState> selections = new();
    public class SelectionState
    {
        public string Name{ get; set; }
        public bool OriginalValue{ get; set; }
        public bool NewValue{ get; set; }
    }

    override protected async Task OnParametersSetAsync()
    {
        allPlaylists = await svc.GetPlaylistsAsync();
        foreach (var playlist in allPlaylists)
        {
            bool inPlaylist = playlist.Songs.Any(s => s.Path == Song.Path);
            selections.Add(new SelectionState
                {
                    Name = playlist.Name,
                    OriginalValue = inPlaylist,
                    NewValue = inPlaylist
                });
        }
    }

    void close() => dialog.Hide();

    void checkedChanged(bool? isChecked, string playlistName)
    {
        selections.Single(s => s.Name == playlistName).NewValue = isChecked ?? false;
    }

    async Task save()
    {
        if (Song == null)
            return;

        var uncheckedPlaylists = selections.Where(s => s.NewValue == false && s.OriginalValue == true).Select(s => s.Name);
        var checkedPlaylists = selections.Where(s => s.NewValue == true && s.OriginalValue == false).Select(s => s.Name);

        if (!uncheckedPlaylists.Any() && !checkedPlaylists.Any() && String.IsNullOrWhiteSpace(newPlaylistName))
            return;

        foreach(var playlist in checkedPlaylists)
        {
            await svc.AddToPlaylistAsync(playlist, Song.Path);
        }

        foreach(var playlist in uncheckedPlaylists)
        {
            await svc.RemoveFromPlaylistAsync(playlist, Song.Path);
        }

        if(!String.IsNullOrWhiteSpace(newPlaylistName))
        {
            await svc.AddToPlaylistAsync(newPlaylistName, Song.Path);
        }

        dialog.Hide();
    }
}
