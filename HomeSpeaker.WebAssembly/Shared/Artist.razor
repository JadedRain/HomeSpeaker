@inject HomeSpeakerService svc

<div class="row gx-1 p-1">
    <div class="row mb-1 gx-1 mx-1 py-1 bg-primary text-white rounded">
        <div class="col">
            <div class="h5 mb-2" @onclick=toggleExpanded>@(String.IsNullOrWhiteSpace(Content.Key) ? "[ No Artist ]" : Content.Key)</div>
        </div>
        <div class="col-auto text-white">
            <button @onclick=play class="btn btn-secondary"><span class="oi oi-media-play" /></button>
            <button @onclick=queue class="btn btn-secondary"><span class="oi oi-plus" /></button>
        </div>
    </div>
    @if (isExpanded)
    {
        @foreach (var album in from song in Content
                              group song by song.Album into album
                              select album)
        {
            <div class="row mb-1 gx-1 mx-1 py-1 bg-secondary text-white rounded">
                <div class="col">
                    <div class="h5">
                    @(String.IsNullOrWhiteSpace(album.Key) ? "[ No Album ]" : album.Key)
                    </div>
                </div>
                <div class="col-auto">
                    <button @onclick=@(()=>playAlbum(album)) class="btn btn-primary"><span class="oi oi-media-play" /></button>
                    <button @onclick=@(()=>queueAlbum(album)) class="btn btn-primary"><span class="oi oi-plus" /></button>
                </div>
            </div>
            <FolderDetails Name="@album.Key" Songs="@album" />
        }
    }
</div>

@code {
    [Parameter]
    public IGrouping<string, SongViewModel> Content { get; set; }

    private bool isExpanded = false;

    async Task play()
    {
        if (Content == null || !Content.Any())
            return;

        await svc.StopPlayingAsync();
        foreach (var song in Content)
        {
            await svc.EnqueueSongAsync(song.SongId);
        }
    }

    async Task queue()
    {
        if (Content == null || !Content.Any())
            return;

        foreach (var song in Content)
        {
            await svc.EnqueueSongAsync(song.SongId);
        }
    }

    async Task playAlbum(IEnumerable<SongViewModel> songs)
    {
        await svc.StopPlayingAsync();
        foreach (var song in songs)
        {
            await svc.EnqueueSongAsync(song.SongId);
        }
    }

    async Task queueAlbum(IEnumerable<SongViewModel> songs)
    {
        foreach (var song in songs)
        {
            await svc.EnqueueSongAsync(song.SongId);
        }
    }

    void toggleExpanded() => isExpanded = !isExpanded;
}
