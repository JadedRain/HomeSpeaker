@*<div class="h4">@(String.IsNullOrWhiteSpace(Content.Key) ? "[ No Artist ]" : Content.Key)</div>
@foreach (var album in from song in Content
                      group song by song.Album into album
                      select album)
{
    <div class="h5">@(String.IsNullOrWhiteSpace(album.Key) ? "[ No Album ]" : album.Key)</div>
    <FolderDetails Name="@album.Key" Songs="@album" />
}*@

<div class="row border gx-1 p-1">
    <div class="row mb-0 gx-1 ms-1">
        <div class="col">
            <div class="h5 mb-2" @onclick=toggleExpanded>@(String.IsNullOrWhiteSpace(Content.Key) ? "[ No Artist ]" : Content.Key)</div>
        </div>
        <div class="col-auto">
            <button @onclick=play class="btn btn-outline-primary"><span class="oi oi-media-play" /></button>
            <button @onclick=queue class="btn btn-outline-primary"><span class="oi oi-plus" /></button>
        </div>
    </div>
    @if (isExpanded)
    {
        <div class="row gx-1">
            @foreach (var album in from song in Content
                                  group song by song.Album into album
                                  select album)
            {
                <div class="h5">@(String.IsNullOrWhiteSpace(album.Key) ? "[ No Album ]" : album.Key)</div>
                <FolderDetails Name="@album.Key" Songs="@album" />
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public IGrouping<string, SongViewModel> Content { get; set; }

    protected override async Task OnParametersSetAsync()
    {

    }

    private bool isExpanded = false;

    async Task play()
    {
        //if (Name == null)
        //    return;

        //await svc.PlayFolderAsync(Name);
    }

    async Task queue()
    {
        //if (Name == null)
        //    return;

        //await svc.EnqueueFolderAsync(Name);
    }

    void toggleExpanded() => isExpanded = !isExpanded;
}
